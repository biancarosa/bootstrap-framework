package com.siprell.plugin.gradle.bootstrap

import org.gradle.api.DefaultTask
import org.gradle.api.file.FileTree
import org.gradle.api.Plugin
import org.gradle.api.Project
import org.gradle.api.tasks.Input
import org.gradle.api.tasks.TaskAction
import org.gradle.api.tasks.TaskExecutionException

class BootstrapGradlePlugin implements Plugin<Project> {
	final BOOTSTRAP_DEFAULT_VERSION = "3.3.5"
	final FA_DEFAULT_VERSION = "4.3.0"

	void apply(Project project) {

		// Shared properties
		String tmpDir = "${project.buildDir}/tmp"
		def properties = project.hasProperty("bootstrapFramework") ? project.bootstrapFramework : [:]
		// Bootstrap Framework properties
		String bootstrapVersion = properties.version ?: BOOTSTRAP_DEFAULT_VERSION
		boolean useIndividualJs = properties.useIndividualJs ?: false
		boolean useLess = properties.useLess ?: false
		String jsPath = properties.jsPath ? properties.jsPath : "grails-app/assets/javascripts"
		String cssPath = properties.cssPath ? properties.cssPath : "grails-app/assets/stylesheets"
		boolean useAssetPipeline = jsPath.contains("assets")
		String bootstrapZipFilename = "bootstrapFramework.zip"
		// FontAwesome properties
		def fontAwesome = properties.fontAwesome
		boolean useFontAwesome = properties.fontAwesome ? true : false
		String fontAwesomeVersion = fontAwesome?.version ?: FA_DEFAULT_VERSION
		boolean fontAwesomeUseLess = fontAwesome?.useLess ?: false
		String fontAwesomeZipFilename = "fontAwesome.zip"

		project.afterEvaluate {
			project.tasks.createBootstrapJs.mustRunAfter project.tasks.downloadBootstrapZip
			project.tasks.createBootstrapFonts.mustRunAfter project.tasks.downloadBootstrapZip
			project.tasks.createBootstrapCssIndividual.mustRunAfter project.tasks.downloadBootstrapZip
			project.tasks.createBootstrapLess.mustRunAfter project.tasks.downloadBootstrapZip
			project.tasks.createBootstrapMixins.mustRunAfter project.tasks.downloadBootstrapZip
			project.tasks.processResources.dependsOn(
				"downloadBootstrapZip",
				"createBootstrapJsAll",
				"createBootstrapJs",
				"createBootstrapCssAll",
				"createBootstrapFonts",
				"createBootstrapCssIndividual",
				"createBootstrapLessAll",
				"createBootstrapLess",
				"createBootstrapMixins"
			)
		}

		project.task("bootstrapFrameworkVersions") << {
			println "$BOOTSTRAP_DEFAULT_VERSION is the default Bootstrap Framework version."
			println "$FA_DEFAULT_VERSION is the default FontAwesome version."
		}

		project.task("downloadBootstrapZip", type: DownloadZipTask) {
			description = "Bootstrap Framework"
			filePrefix = "bootstrap-v"
			tmp = "${project.buildDir}/tmp"
			version = bootstrapVersion
			url = "https://github.com/twbs/bootstrap/archive/v${version}.zip"
			zipFilename = bootstrapZipFilename
			zipTempFilename = "${filePrefix}${version}.zip"
		}

		project.task("downloadFontAwesomeZip", type: DownloadZipTask) {
			description = "FontAwesome"
			filePrefix = "fontAwesome-v"
			tmp = "${project.buildDir}/tmp"
			version = fontAwesomeVersion
			url = "http://fontawesome.io/assets/font-awesome-${version}.zip"
			zipFilename = fontAwesomeZipFilename
			zipTempFilename = "${filePrefix}${version}.zip"
		}

		project.task("createBootstrapJsAll") {
			def path = "${project.projectDir}/$jsPath"
			def file = "bootstrap-all.js"
			project.gradle.taskGraph.whenReady { graph ->
				inputs.file file
				outputs.dir path
			}
			doLast {
				if (useAssetPipeline) {
					def bootstrapJs = project.file("$path/$file")
					bootstrapJs.text = """//
// Do not edit this file. It will be overwritten by the bootstrap plugin.
//
//= require bootstrap/bootstrap.js
"""
				}
			}
		}

		project.task("createBootstrapJs") {
			def path = "${project.projectDir}/$jsPath/bootstrap"
			if (!project.file(path).exists()) {
				project.mkdir(path)
			}
			FileTree zipTree = project.zipTree("$tmpDir/$bootstrapZipFilename")
			def files = zipTree.matching {
				include "*/dist/js/bootstrap.js"
				if (useIndividualJs) {
					include "*/js/*.js"
				}
			}.collect()
			project.gradle.taskGraph.whenReady { graph ->
				inputs.file files
				outputs.dir path
			}
			doLast {
				project.copy {
					from files
					into path
				}
				if (!useIndividualJs) {
					project.file(path).listFiles().each { file ->
						if (file.name != "bootstrap.js") {
							file.delete()
						}
					}
				}
			}
		}

		project.task("createBootstrapCssAll") {
			def path = "${project.projectDir}/$cssPath"
			def file = "bootstrap-all.css"
			project.gradle.taskGraph.whenReady { graph ->
				inputs.file file
				outputs.dir path
			}
			doLast {
				if (useAssetPipeline) {
					def bootstrapCss = project.file("$path/$file")
					bootstrapCss.text = """/*
* Do not edit this file. It will be overwritten by the bootstrap plugin.
*
*= require bootstrap/css/bootstrap.css
*= require bootstrap/css/bootstrap-theme.css
*/
"""
				}
			}
		}

		project.task("createBootstrapFonts") {
			def path = "${project.projectDir}/$cssPath/bootstrap/fonts"
			if (!project.file(path).exists()) {
				project.mkdir(path)
			}
			FileTree zipTree = project.zipTree("$tmpDir/$bootstrapZipFilename")
			def files = zipTree.matching {
				include "*/fonts/*"
			}.collect()
			project.gradle.taskGraph.whenReady { graph ->
				inputs.file files
				outputs.dir path
			}
			doLast {
				project.copy {
					from files
					into path
				}
			}
		}

		project.task("createBootstrapCssIndividual") {
			def path = "${project.projectDir}/$cssPath/bootstrap/css"
			if (!project.file(path).exists()) {
				project.mkdir(path)
			}
			FileTree zipTree = project.zipTree("$tmpDir/$bootstrapZipFilename")
			def files = zipTree.matching {
				include "*/dist/css/*.css"
				exclude "*/dist/css/*.min.css"
			}.collect()
			project.gradle.taskGraph.whenReady { graph ->
				inputs.file files
				outputs.dir path
			}
			doLast {
				project.copy {
					from files
					into path
				}
			}
		}

		project.task("createBootstrapLessAll") {
			def path = "${project.projectDir}/$cssPath"
			def file = "bootstrap-less.less"
			project.gradle.taskGraph.whenReady { graph ->
				inputs.file file
				outputs.dir path
			}
			doLast {
				if (useLess && useAssetPipeline) {
					def bootstrapLess = project.file("$path/$file")
					bootstrapLess.text = """/*
* This file is for your less and mixin customizations.
* It was created by the bootstrap plugin.
* It will not be overwritten.
*
* You can import all less and mixin files as shown below,
* or you can import them individually.
* See https://github.com/kensiprell/grails3-bootstrap/blob/master/README.md#less
*/

@import "bootstrap/less/bootstrap.less";

/*
* Your customizations go below this section.
*/
"""
				}
			}
		}

		project.task("createBootstrapLess") {
			def path = "${project.projectDir}/$cssPath/bootstrap/less"
			FileTree zipTree = project.zipTree("$tmpDir/$bootstrapZipFilename")
			def files = zipTree.matching {
				include "*/less/*.less"
			}.collect()
			project.gradle.taskGraph.whenReady { graph ->
				inputs.file files
				outputs.dir path
			}
			doLast {
				if (useLess) {
					project.copy {
						from files
						into path
					}
				} else {
					project.file(path).deleteDir()
				}
			}
		}

		project.task("createBootstrapMixins") {
			def path = "${project.projectDir}/$cssPath/bootstrap/less/mixins"
			if (useLess && !project.file(path).exists()) {
				project.mkdir(path)
			}
			FileTree zipTree = project.zipTree("$tmpDir/$bootstrapZipFilename")
			def files = zipTree.matching {
				include "*/less/mixins/*.less"
			}.collect()
			project.gradle.taskGraph.whenReady { graph ->
				inputs.file files
				outputs.dir path
			}
			doLast {
				if (useLess) {
					project.copy {
						from files
						into path
					}
				} else {
					project.file(path).deleteDir()
				}
			}
		}
	}
}

class DownloadZipTask extends DefaultTask {
	String fileSuffix = ".zip"
	@Input
	String description
	@Input
	String filePrefix
	@Input
	String tmp
	@Input
	String url
	@Input
	String version
	@Input
	String zipFilename
	@Input
	String zipTempFilename

	@TaskAction
	def download() {
		def tmpDirFile = new File("$tmp")
		if (!tmpDirFile.exists()) {
			tmpDirFile.mkdir()
		}
		try {
			def file = project.file("$tmp/$zipTempFilename").newOutputStream()
			file << new URL(url).openStream()
			file.close()
			project.copy {
				from file
				into tmp
				rename { String fileName ->
					fileName.replace(zipTempFilename, zipFilename)
				}
			}
		} catch (e) {
			project.file(zipTempFilename).delete()
			println "Error: Could not download $url.\nYou are not connected to the Internet, or $version is an invalid version number."
			List<File> zipFiles = []
			project.file(tmp).listFiles().each {
				if (it.name.startsWith(filePrefix)) {
					zipFiles << it
				}
			}
			if (zipFiles.size() > 0) {
				File zipFile
				if (zipFiles.size() == 1) {
					zipFile = zipFiles[0]
				} else {
					zipFile = zipFiles.sort(false) { a, b ->
						def tokens = [a.name.minus(filePrefix).minus(fileSuffix), b.name.minus(filePrefix).minus(fileSuffix)]
						tokens*.tokenize('.')*.collect { it as int }.with { u, v ->
							[u, v].transpose().findResult { x, y -> x <=> y ?: null } ?: u.size() <=> v.size()
						}
					}[-1]
				}
				project.copy {
					from zipFile
					into tmp
					rename { String fileName ->
						fileName.replace(zipTempFilename, zipFilename)
					}
				}
				String oldVersion = project.version
				String version = zipFile.name.minus(filePrefix).minus(fileSuffix)
				println "Using $description version $version instead of $oldVersion."
			} else {
				// TODO is this the correct exception?
				//throw new TaskExecutionException(this, new Throwable("No $description zip file found in $tmp."))
				println "ERROR ERROR ERROR"
			}
		}
	}
}

